name: Continuous Integration

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

env:
  CONAN_NON_INTERACTIVE: 1
  CONAN_LOGIN_USERNAME: github-workflows-user
  CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD }}

# TODO: Add sonarcloud job
jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3.3.0

      - uses: actions/setup-python@v4.5.0
        with:
          python-version: '3.8'
          cache: 'pip'
      - run: pip install codespell

      - run: cmake -D FORMAT_COMMAND=clang-format-14 -P cmake/lint.cmake

      - name: Spell check
        if: always()
        run: cmake -P cmake/spell.cmake

  coverage:
    needs: [lint]
    runs-on: ubuntu-latest
    if: github.repository_owner == 'JesusKrists'

    steps:
      - uses: actions/checkout@v3.3.0

      - run: sudo apt-get update -q
          && sudo apt-get install lcov -q -y

      - uses: ./.github/actions/setup_tools_shared

      - name: Cache conan dependencies
        uses: actions/cache@v3.2.6
        with:
          path: |
            ~/.conan
          key: ${{ runner.os }}-${{ hashFiles('conanfile.py') }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('.github/gcc.profile') }}

      - name: Install dependencies
        run: conan remote add jesuskrists-conan https://jesuskrists.jfrog.io/artifactory/api/conan/jesuskrists-conan --force --insert 0
          && conan install . -b missing -pr .github/gcc.profile -o jengine-reformed*:coverage_build=True

      - name: Configure
        run: cmake --preset=ci-coverage

      - name: Build
        env:
          TRACY_NO_INVARIANT_CHECK: '1'
        run: cmake --build build/coverage -j 2

      - name: Test
        uses: GabrielBB/xvfb-action@v1.6
        env:
          TRACY_NO_INVARIANT_CHECK: '1'
        with:
          working-directory: build/coverage
          run: ctest --output-on-failure --no-tests=error -j 2

      - name: Process coverage info
        run: cmake --build build/coverage -t coverage

      - name: Submit to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          file: build/coverage/coverage.info

  sonarcloud:
    needs: [lint]
    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed

    steps:
      - uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - uses: ./.github/actions/setup_tools_shared

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1

      - name: Cache conan dependencies
        uses: actions/cache@v3.2.6
        with:
          path: |
            ~/.conan
          key: ${{ runner.os }}-${{ hashFiles('conanfile.py') }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('.github/gcc.profile') }}

      - name: Install dependencies
        run: conan remote add jesuskrists-conan https://jesuskrists.jfrog.io/artifactory/api/conan/jesuskrists-conan --force --insert 0
          && conan install . -b missing -pr .github/gcc.profile

      - name: Configure
        run: cmake --preset=ci-ubuntu-noanalysis -DCMAKE_BUILD_TYPE:STRING=Debug

      - name: Build
        env:
          TRACY_NO_INVARIANT_CHECK: '1'
        run: build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build -j 2

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: sonar-scanner --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

  sanitize:
    needs: [lint]
    strategy:
      matrix:
        compiler: [gcc-12, clang-15]
        configuration: [Debug, Release]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3.3.0

      - uses: ./.github/actions/setup_tools_shared

      - name: Install clang
        if: matrix.compiler != 'gcc-12'
        env:
          LLVM_URL: http://apt.llvm.org/focal/
          LLVM_PKG: llvm-toolchain-focal
        run: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - 2>/dev/null
          && sudo add-apt-repository -y "deb ${{ env.LLVM_URL }} ${{ env.LLVM_PKG }} main"
          && sudo apt-get update -q
          && sudo apt-get install -y -q ${{ matrix.compiler }}

      - name: Cache conan dependencies
        uses: actions/cache@v3.2.6
        with:
          path: |
            ~/.conan
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.configuration }}-${{ hashFiles('conanfile.py') }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('.github/*.profile') }}

      - name: Install dependencies
        run: conan remote add jesuskrists-conan https://jesuskrists.jfrog.io/artifactory/api/conan/jesuskrists-conan --force --insert 0
          && conan install . -b missing -pr .github/${{ matrix.compiler }}.profile -s build_type=${{ matrix.configuration }} -o jengine-reformed*:sanitize_build=True

      - name: Configure - gcc
        if: matrix.compiler == 'gcc-12'
        env:
          C: gcc-12
          CXX: g++-12
        run: cmake --preset=ci-sanitize -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }}

      - name: Configure - clang
        if: matrix.compiler != 'gcc-12'
        env:
          C: clang-15
          CXX: clang++-15
        run: cmake --preset=ci-sanitize -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }}

      - name: Build
        env:
          TRACY_NO_INVARIANT_CHECK: '1'
        run: cmake --build build/sanitize --config ${{ matrix.configuration }} -j 2

      - name: Test
        uses: GabrielBB/xvfb-action@v1.6
        env:
          ASAN_OPTIONS: "detect_invalid_pointer_pairs=1:\
            strict_string_checks=1:\
            detect_stack_use_after_return=1:\
            check_initialization_order=1:\
            strict_init_order=1:\
            detect_leaks=1:\
            fast_unwind_on_malloc=0:\
            suppressions=${{ github.workspace }}/ASAN.supp"
          LSAN_OPTIONS: 'suppressions=${{ github.workspace }}/LSAN.supp'
          UBSAN_OPTIONS: print_stacktrace=1
          TRACY_NO_INVARIANT_CHECK: '1'
        with:
          working-directory: build/sanitize
          run: ctest --output-on-failure -C ${{ matrix.configuration }} --no-tests=error -j 2

  test:
    needs: [lint]
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        configuration: [Debug, Release]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3.3.0

      - uses: ./.github/actions/setup_tools_shared

      - name: Install clang-tidy-15 - Linux
        if: runner.os == 'Linux'
        env:
          LLVM_URL: http://apt.llvm.org/focal/
          LLVM_PKG: llvm-toolchain-focal-15
        run: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - 2>/dev/null
          && sudo add-apt-repository -y "deb ${{ env.LLVM_URL }} ${{ env.LLVM_PKG }} main"
          && sudo apt-get update -q
          && sudo apt-get install -y -q clang-tidy-15
          && sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-15 200

      - name: Build cppcheck 2.10 - Linux
        if: runner.os == 'Linux'
        env:
          CPPCHECK_BUILD: /home/cppcheck/build
          CPPCHECK_SRC: /home/cppcheck/cppcheck-src
        run: sudo apt-get purge --auto-remove cppcheck
          && sudo apt-get install -y -q libxml2-utils libz3-dev libtinyxml2-dev libpcre3-dev
          && sudo mkdir -p ${{ env.CPPCHECK_BUILD }}
          && git clone --branch 2.10 https://github.com/danmar/cppcheck.git ${{ env.CPPCHECK_SRC }}
          && cmake -S ${{ env.CPPCHECK_SRC }} -B ${{ env.CPPCHECK_BUILD }} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE:STRING=Release -DHAVE_RULES=On -DBUILD_GUI=Off
          && cmake --build ${{ env.CPPCHECK_BUILD }} -j
          && sudo cmake --install ${{ env.CPPCHECK_BUILD }}

      - name: Cache conan dependencies
        uses: actions/cache@v3.2.6
        with:
          path: |
            ~/.conan
          key: ${{ runner.os }}-${{ matrix.configuration }}-${{ hashFiles('conanfile.py') }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('.github/*.profile') }}

      - name: Install dependencies
        shell: bash
        run: |
          conan remote add jesuskrists-conan https://jesuskrists.jfrog.io/artifactory/api/conan/jesuskrists-conan --force --insert 0
          conan profile new default --detect --force
          if [ ${{ runner.os }} = Linux ]; then
            conan profile update settings.compiler.libcxx=libstdc++11 default
          fi
          conan install . -b missing -s build_type=${{ matrix.configuration }} -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True

      - name: Setup MultiToolTask
        if: runner.os == 'Windows'
        run: |
          Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
          Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

      - name: Configure
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }}

      - name: Build
        env:
          TRACY_NO_INVARIANT_CHECK: '1'
        run: cmake --build build --config ${{ matrix.configuration }} -j 2

      - name: Install
        run: cmake --install build --config ${{ matrix.configuration }} --prefix install

      - name: Test
        uses: GabrielBB/xvfb-action@v1.6
        env:
          TRACY_NO_INVARIANT_CHECK: '1'
          GALLIUM_DRIVER: llvmpipe
        with:
          working-directory: build
          run: ctest --output-on-failure -C ${{ matrix.configuration }} --no-tests=error -j 2

  test-msys:
    needs: [lint]
    strategy:
      matrix:
        configuration: [Debug, Release]
        compiler: [clang-15, gcc-12]

    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: UCRT64
          install: >
            base-devel
            git
          pacboy: >
            gcc:p
            clang:p
            cppcheck:p
            include-what-you-use:p
            clang-tools-extra:p
            python:p
            python-pip:p
            mesa:p
            cmake:p
            ninja:p
            make:p

      - uses: actions/checkout@v3.3.0

      - name: Install python deps
        run: pip install -r requirements.txt

      - name: Cache conan dependencies
        uses: actions/cache@v3.2.6
        with:
          path: |
            ~/.conan
          key: ${{ runner.os }}-msys-UCRT64-${{ matrix.compiler }}-${{ matrix.configuration }}-${{ hashFiles('conanfile.py') }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('.github/*.profile') }}

      - name: Add conan remote
        run: conan config install https://github.com/JesusKrists/JEngine-conan-settings.git
          && conan remote add jesuskrists-conan https://jesuskrists.jfrog.io/artifactory/api/conan/jesuskrists-conan --force --insert 0

      - name: Install dependencies - gcc
        if: matrix.compiler == 'gcc-12'
        run: conan install . -b missing -pr .github/${{ matrix.compiler }}.profile -s build_type=${{ matrix.configuration }} -s os=Windows -e CC=gcc -e CXX=g++

      - name: Install dependencies - clang
        if: matrix.compiler != 'gcc-12'
        run: conan install . -b missing -pr .github/${{ matrix.compiler }}.profile -s build_type=${{ matrix.configuration }} -s os=Windows -e CC=clang -e CXX=clang++

      - name: Configure - gcc
        if: matrix.compiler == 'gcc-12'
        env:
          CC: gcc
          CXX: g++
        run: cmake "--preset=ci-windows-msys" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }}

      - name: Configure - clang
        if: matrix.compiler != 'gcc-12'
        env:
          CC: clang
          CXX: clang++
        run: cmake "--preset=ci-windows-msys" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }}

      - name: Build
        env:
          TRACY_NO_INVARIANT_CHECK: '1'
        run: cmake --build build --config ${{ matrix.configuration }} -j 2

      - name: Install
        run: cmake --install build --config ${{ matrix.configuration }} --prefix install

      - name: Test
        env:
          TRACY_NO_INVARIANT_CHECK: '1'
          GALLIUM_DRIVER: llvmpipe
        working-directory: build
        run: ctest --output-on-failure -C ${{ matrix.configuration }} --no-tests=error -j 2

  msys-sanitize:
    needs: [lint]
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: CLANG64
          install: >
            base-devel
            git
          pacboy: >
            gcc:p
            clang:p
            cppcheck:p
            include-what-you-use:p
            clang-tools-extra:p
            python:p
            python-pip:p
            mesa:p
            cmake:p
            ninja:p
            make:p

      - uses: actions/checkout@v3.3.0

      - name: Install python deps
        run: pip install -r requirements.txt

      - name: Cache conan dependencies
        uses: actions/cache@v3.2.6
        with:
          path: |
            ~/.conan
          key: ${{ runner.os }}-msys-CLANG64-clang-15-${{ matrix.configuration }}-${{ hashFiles('conanfile.py') }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('.github/*.profile') }}

      - name: Add conan remote
        run: conan config install https://github.com/JesusKrists/JEngine-conan-settings.git
          && conan remote add jesuskrists-conan https://jesuskrists.jfrog.io/artifactory/api/conan/jesuskrists-conan --force --insert 0

      - name: Install dependencies - clang
        run: conan install . -b missing -pr .github/clang-15.profile -s build_type=${{ matrix.configuration }} -s os=Windows -s compiler.libcxx=libc++ -e CC=clang -e CXX=clang++ -o jengine-reformed*:sanitize_build=True

      - name: Configure - clang
        env:
          CC: clang
          CXX: clang++
        run: cmake "--preset=ci-msys-sanitize" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }}

      - name: Build
        env:
          TRACY_NO_INVARIANT_CHECK: '1'
        run: cmake --build build/sanitize --config ${{ matrix.configuration }} -j 2

      - name: Install
        run: cmake --install build/sanitize --config ${{ matrix.configuration }} --prefix install

      - name: Test
        env:
          ASAN_OPTIONS: "detect_invalid_pointer_pairs=1:\
            strict_string_checks=1:\
            detect_stack_use_after_return=1:\
            check_initialization_order=1:\
            strict_init_order=1:\
            suppressions=\"${{ github.workspace }}\\ASAN.supp\""
          LSAN_OPTIONS: 'suppressions="${{ github.workspace }}\LSAN.supp"'
          UBSAN_OPTIONS: print_stacktrace=1
          TRACY_NO_INVARIANT_CHECK: '1'
          GALLIUM_DRIVER: llvmpipe
        working-directory: build/sanitize
        run: ctest --output-on-failure -C ${{ matrix.configuration }} --no-tests=error -j 2

  test-clangcl:
    needs: [lint]
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3.3.0

      - uses: ./.github/actions/setup_tools_shared

      - name: Cache conan dependencies
        uses: actions/cache@v3.2.6
        with:
          path: |
            ~/.conan
          key: ${{ runner.os }}-clangcl-${{ matrix.configuration }}-${{ hashFiles('conanfile.py') }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('.github/*.profile') }}

      - name: Install dependencies
        shell: bash
        run: conan remote add jesuskrists-conan https://jesuskrists.jfrog.io/artifactory/api/conan/jesuskrists-conan --force --insert 0
          && conan install . -b missing -pr .github/clang-cl.profile -s build_type=${{ matrix.configuration }}

      - name: Setup MultiToolTask
        if: runner.os == 'Windows'
        run: |
          Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
          Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

      - name: Configure
        shell: pwsh
        run: cmake "--preset=ci-windows-clangcl" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }}

      - name: Build
        env:
          TRACY_NO_INVARIANT_CHECK: '1'
        run: cmake --build build --config ${{ matrix.configuration }} -j 2

      - name: Install
        run: cmake --install build --config ${{ matrix.configuration }} --prefix install

      - name: Test
        uses: GabrielBB/xvfb-action@v1.6
        env:
          TRACY_NO_INVARIANT_CHECK: '1'
          GALLIUM_DRIVER: llvmpipe
        with:
          working-directory: build
          run: ctest --output-on-failure -C ${{ matrix.configuration }} --no-tests=error -j 2

  docs:
    # Deploy docs only when builds succeed
    needs: [sanitize, test, test-msys, msys-sanitize, test-clangcl, coverage, sonarcloud]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
      && github.event_name == 'push'
      && github.repository_owner == 'JesusKrists'

    steps:
      - uses: actions/checkout@v3.3.0

      - uses: actions/setup-python@v4.5.0
        with:
          python-version: '3.8'
          cache: 'pip'
      - run: pip install -r requirements.txt

      - name: Install Doxygen
        run: sudo apt-get update -q
          && sudo apt-get install doxygen -q -y

      - name: Build docs
        run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
          -P cmake/docs-ci.cmake

      - name: Deploy docs
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/docs/html
