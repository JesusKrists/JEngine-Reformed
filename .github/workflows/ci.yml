name: Continuous Integration

on:
  push:
    branches:
    - master

  pull_request:
    branches:
    - master

# TODO: Add sonarcloud job
jobs:
  lint:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with: { python-version: "3.8" }

    - name: Install codespell
      run: pip3 install codespell

    - name: Lint
      run: cmake -D FORMAT_COMMAND=clang-format-14 -P cmake/lint.cmake

    - name: Spell check
      if: always()
      run: cmake -P cmake/spell.cmake

  coverage:
    needs: [lint]
    runs-on: ubuntu-22.04
    if: github.repository_owner == 'JesusKrists'

    steps:
    - uses: actions/checkout@v3

    - name: Install LCov
      run: sudo apt-get update -q
        && sudo apt-get install lcov -q -y

    - name: Install ninja-build tool
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.8" }

    - name: Install dependencies
      run: pip3 install "conan<2"
        && conan profile new default --detect
        && conan profile update settings.compiler.libcxx=libstdc++11 default
        && conan install . -b missing

    - name: Configure
      run: cmake --preset=ci-coverage

    - name: Build
      env:
        TRACY_NO_INVARIANT_CHECK: "1"
      run: cmake --build build/coverage -j 2

    - name: Test
      env:
        TRACY_NO_INVARIANT_CHECK: "1"
      working-directory: build/coverage
      run: ctest --output-on-failure -j 2

    - name: Process coverage info
      run: cmake --build build/coverage -t coverage

    - name: Submit to codecov.io
      uses: codecov/codecov-action@v3
      with:
        file: build/coverage/coverage.info

  sanitize:
    needs: [lint]
    strategy:
      matrix:
        compiler: [gcc-12, clang-17]

    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.8" }

    - name: Install clang-17
      if: matrix.compiler == 'clang-17'
      env:
        LLVM_URL: http://apt.llvm.org/focal/
        LLVM_PKG: llvm-toolchain-focal
      run: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - 2>/dev/null
        && sudo add-apt-repository -y "deb ${{ env.LLVM_URL }} ${{ env.LLVM_PKG }} main"
        && sudo apt-get update -qq
        && sudo apt-get install -y -q clang-17

    - name: Install ninja-build tool
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Install CMake
      uses: jwlawson/actions-setup-cmake@v1.13.0

    - name: Install dependencies
      run: pip3 install "conan<2"
        && conan config install https://github.com/JesusKrists/JEngine-conan-settings.git
        && conan install . -b missing -pr .github/${{ matrix.compiler }}.profile
      
    - name: Configure - clang-17
      if: matrix.compiler == 'clang-17'
      env: 
        C: clang-17
        CXX: clang++-17
      run: cmake --preset=ci-sanitize
      
    - name: Configure - gcc-12
      if: matrix.compiler == 'gcc-12'
      env: 
        C: gcc-12
        CXX: g++-12
      run: cmake --preset=ci-sanitize

    - name: Build
      env:
        TRACY_NO_INVARIANT_CHECK: "1"
      run: cmake --build build/sanitize -j 2

    - name: Test
      working-directory: build/sanitize
      env:
        ASAN_OPTIONS: "detect_invalid_pointer_pairs=1:\
          strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
        TRACY_NO_INVARIANT_CHECK: "1"
        UBSAN_OPTIONS: print_stacktrace=1
      run: ctest --output-on-failure -j 2

  test:
    needs: [lint]
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022]
        configuration: [Debug, Release]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Setup VS Dev Environment
      if: matrix.os == 'windows-2022'
      uses: seanmiddleditch/gha-setup-vsdevenv@v4

    - name: Install clang-tidy-17
      if: matrix.os == 'ubuntu-22.04'
      env:
        LLVM_URL: http://apt.llvm.org/focal/
        LLVM_PKG: llvm-toolchain-focal
      run: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - 2>/dev/null
        && sudo add-apt-repository -y "deb ${{ env.LLVM_URL }} ${{ env.LLVM_PKG }} main"
        && sudo apt-get update -qq
        && sudo apt-get install -y -q clang-tidy-17
        && sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-17 200
      
    - name: Install ninja-build tool
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Install CMake
      uses: jwlawson/actions-setup-cmake@v1.13.0

    - name: Build cppcheck 2.9 - Linux
      if: matrix.os == 'ubuntu-22.04'
      env:
        CPPCHECK_BUILD: /home/cppcheck/build
        CPPCHECK_SRC: /home/cppcheck/cppcheck-src
      run: sudo apt-get purge --auto-remove cppcheck
        && sudo apt-get install -y -q libxml2-utils libz3-dev libtinyxml2-dev libpcre3-dev
        && sudo mkdir -p ${{ env.CPPCHECK_BUILD }}
        && git clone --branch 2.9.3 https://github.com/danmar/cppcheck.git ${{ env.CPPCHECK_SRC }}
        && cmake -S ${{ env.CPPCHECK_SRC }} -B ${{ env.CPPCHECK_BUILD }} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE:STRING=Release -DHAVE_RULES=On -DBUILD_GUI=Off
        && cmake --build ${{ env.CPPCHECK_BUILD }} -j
        && sudo cmake --install ${{ env.CPPCHECK_BUILD }}

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.8" }

    - name: Install dependencies
      shell: bash
      run: |
        pip3 install "conan<2"
        conan profile new default --detect
        if [ ${{ matrix.os }} = ubuntu-22.04 ]; then
          conan profile update settings.compiler.libcxx=libstdc++11 default
        fi
        conan install . -b missing -s build_type=${{ matrix.configuration }}

    - name: Configure
      shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }}

    - name: Build
      run: cmake --build build --config ${{ matrix.configuration }} -j 2

    - name: Install
      run: cmake --install build --config ${{ matrix.configuration }} --prefix install

    - name: Test
      working-directory: build
      run: ctest --output-on-failure -C ${{ matrix.configuration }} -j 2

  docs:
    # Deploy docs only when builds succeed
    needs: [sanitize, test]
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/master'
      && github.event_name == 'push'
      && github.repository_owner == 'JesusKrists'

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with: { python-version: "3.8" }

    - name: Install m.css dependencies
      run: pip3 install jinja2 Pygments

    - name: Install Doxygen
      run: sudo apt-get update -q
        && sudo apt-get install doxygen -q -y

    - name: Build docs
      run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
        -P cmake/docs-ci.cmake

    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/docs/html
